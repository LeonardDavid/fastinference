#include <math.h>
#include <stdint.h>
#include <limits>
#include <algorithm>
#include <cstdint>
#include <fstream>
#include <iostream>
#include <chrono>

#include "utils.h"
#include "{{out_name}}W.hpp"
#include "cuda_{{out_name}}.h"

using namespace std;

namespace {{namespace}} {

void predict_{{name}}({{ feature_type }} const * const x, {{ label_type }} * pred, float * ln_times) {
    auto layer_{{ in_layer_id }}_output = x;

    float kernel_time = 0;
    float sum_cpu = 0, sum_gpu = 0;
	  {{ code_predict|indent(4) }}

    for(int b = 0; b < {{batch_size}}; b++){
      for (int i = 0; i < {{ n_classes }}; i++) {
        pred[b*{{n_classes}} + i] += {% if weight != 1.0 %}{{ weight }} * {% endif %}cuda_layer_{{ out_layer_id }}_output[b*{{ n_classes }} + i];
      }
    }

    ln_times[0] = kernel_time;
    
    // TODO in future maybe use array values directly? -> edit every file cuda_[layer].j2 in every folder
    {% for i in range(out_layer_id) %}
    ln_times[{{i+1}}] = l{{ i+1 }}_time;
    ln_times[{{out_layer_id + i + 1}}] = l{{i+1}}_kernel_time;
    {% endfor %}
    
    //for(int i = 0; i < {{2*out_layer_id+1}}; i++){
    //  std::cout<<i<<": "<<ln_times[i]<<std::endl;
    //}
}

}