#include <math.h>
#include <stdint.h>
#include <limits>
#include <algorithm>
#include <cstdint>

namespace FAST_INFERENCE {

static constexpr signed char layer_2_weight[3][3][1][32] = {{{{1, 1, 1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, 1, -1, 1, -1, -1, -1, 1, 1, 1, 1, -1, 1, -1}}, {{-1, -1, -1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1}}, {{1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1}}}, {{{-1, -1, -1, 1, -1, -1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, 1, -1, -1}}, {{1, -1, 1, -1, 1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 1}}, {{-1, 1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1, 1, 1, -1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1}}}, {{{-1, 1, 1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1, 1, 1, 1, -1}}, {{1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1, -1, 1, 1, -1, -1}}, {{-1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, 1, -1, 1, -1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, -1, 1, -1, 1}}}};
static constexpr signed char layer_2_bias[32] = {-1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, -1, 1, -1, -1, -1, 1};
static constexpr signed int layer_3_threshold[32] = {-20513, 19170, 21728, -58603, -11515, -52726, 20968, -142629, 21279, -143315, 106753, -102620, 103056, 18564, -143008, -105502, 70037, -5003, -99864, 63727, -66876, 67288, 21307, -22080, -20467, 148328, 63097, -66435, 67826, -21175, -19118, -18521};
static constexpr unsigned int layer_5_weight[3][3][32][1] = {{{{0x745fa213}, {0xe184e655}, {0xbdd3a7fe}, {0xd080c11}, {0x63f7b673}, {0x1ad2605e}, {0xfc574114}, {0xe3a2ff7e}, {0x22c43c5c}, {0xf88a2277}, {0x75d27936}, {0x5005868}, {0x74c587a0}, {0xdf43809b}, {0x755ff022}, {0x9c400417}, {0x76e95e6c}, {0xfdf3ba9f}, {0x566b0154}, {0x75537a90}, {0x6c518351}, {0x1480807}, {0x5d5fb555}, {0x551fbf60}, {0x2d9ffbe9}, {0x720872ea}, {0x61cb7778}, {0x6900181c}, {0xdd178df7}, {0xf42df67f}, {0x3ddb3df6}, {0x72143f09}}, {{0x29940739}, {0x77ac766a}, {0x630969f4}, {0x5cbe5678}, {0xfc93b0dd}, {0xcdc2b993}, {0xad8cb5a7}, {0x9d137e3b}, {0x7f5f2b0c}, {0xf1d238ce}, {0xfdf17bff}, {0x13e24899}, {0xe9ede63c}, {0xb77328d9}, {0x6bd3da0e}, {0xdfc8abf2}, {0x91cf194e}, {0xc8d23ef6}, {0xc0ec0b40}, {0x77326ae5}, {0x1344d206}, {0x10578812}, {0xec4ebff6}, {0xf03ed242}, {0x2b88911}, {0xd758780e}, {0xbff68f32}, {0x3526c16}, {0x9eaf5580}, {0x67c3f6f5}, {0x3f93c595}, {0xbfc39f01}}, {{0x419ce268}, {0x7ff7865b}, {0x20a36bbc}, {0xa2acc6e8}, {0xf50f9e60}, {0xdc52a402}, {0x420a1069}, {0x35013144}, {0x4f4da372}, {0x3d5361b9}, {0x7baed84c}, {0x951361b7}, {0xe2aaf63a}, {0x38f2b271}, {0xed316a44}, {0x9e384dda}, {0x4ddb6f52}, {0x4dd6e2e3}, {0xbac6c6b1}, {0x6fdfd7f8}, {0xf19e387e}, {0x35ad8a05}, {0x75b77578}, {0xe243ec7e}, {0x8d717d2e}, {0x8c820522}, {0x63ac836f}, {0xf93a8da9}, {0x2182040a}, {0xb1d178b3}, {0x2bd2e031}, {0xae740408}}}, {{{0x1e5558a5}, {0x423abe60}, {0x8f3629f2}, {0x5d03d59}, {0xb3d77428}, {0xc2b013}, {0xdb472396}, {0xe2ebd2ec}, {0xe0ecb6ea}, {0xe72c9641}, {0xffadf67d}, {0xafb4d268}, {0x48d4c4a1}, {0x98ea3267}, {0xdc1c97f9}, {0x91d34894}, {0x86cdc40}, {0xfbde86d3}, {0x23330833}, {0xfd09e7de}, {0x262cd65b}, {0xc5059925}, {0xeaafcde7}, {0x84178595}, {0x5ea668b}, {0x1228764d}, {0x237f7e64}, {0x8333cba9}, {0xdd23836f}, {0xffa7b7e8}, {0xd57a8d0f}, {0x2e5cee08}}, {{0x886c5a97}, {0x8fd626d2}, {0x756f8bae}, {0x847924c1}, {0x9fad51c2}, {0x5d3d97cf}, {0xed74826b}, {0x57c331ac}, {0x3baf633d}, {0xaf785f7e}, {0x799bc1bf}, {0xa768441c}, {0xe67dcebe}, {0x1f9be77e}, {0x63bcf30a}, {0x9ec28d38}, {0xa05b200c}, {0xf8f09623}, {0xe8b4b2d1}, {0x96d9ad09}, {0xf6ac9636}, {0x24200b9e}, {0xeaa9f8da}, {0xd8cd83c1}, {0x9290f763}, {0x19534e5c}, {0x73e3ef3a}, {0x4706833f}, {0x2aaafeea}, {0x67d0596f}, {0xbc9cd3e3}, {0x99c3aca0}}, {{0x6bfdd6f1}, {0x20ac13c9}, {0x72e79a44}, {0xb99ccf}, {0xefeea47b}, {0x5eeebbe9}, {0x416c54e8}, {0x41d60b14}, {0x32cda3ec}, {0x9f936037}, {0x2d4bf6ae}, {0x15423b36}, {0x27c7e9b2}, {0xdfa497f9}, {0x1f3de2d7}, {0x8b0298ae}, {0xdd5ff597}, {0xe66e9e3c}, {0xf8bd56bb}, {0x62dfe7c2}, {0x4e2ce6cf}, {0x718cb340}, {0xafe8535}, {0xf28ef225}, {0xbdd32532}, {0x9cd3b3f4}, {0x8d034bfb}, {0xeccd9ac8}, {0x16507011}, {0x254048b4}, {0xf23fb74d}, {0xf6c3b585}}}, {{{0x5801238f}, {0x84302002}, {0x6b6404ae}, {0x14b209c4}, {0x1a4b44fb}, {0x8786b08f}, {0xf645a3fe}, {0x6af4d3ff}, {0xa76487ea}, {0xf834fed8}, {0x62317672}, {0x6210c034}, {0x83d77701}, {0x96304da}, {0xfbfd8f09}, {0x5d536b91}, {0xa4e49068}, {0xffd1f6b6}, {0x945e4187}, {0xc143735b}, {0x75559f75}, {0x44732b40}, {0xdd1ff79b}, {0x44534d52}, {0xbd4aa9c5}, {0x8a401426}, {0x7361f6a3}, {0x26e9957d}, {0x3cffbe51}, {0xecfff6fb}, {0x72c74460}, {0x8200cc80}}, {{0xda7e6e32}, {0xdc316037}, {0x10becf75}, {0x1d35c11e}, {0x9753a596}, {0xb1f8f401}, {0x1c344f25}, {0x2fcb5a89}, {0xda5a2275}, {0x39e2741f}, {0xf7715167}, {0x4d7dd874}, {0xf6fb74bb}, {0x756dae64}, {0xcae64669}, {0xd5798168}, {0x80497080}, {0x9f12e482}, {0xc0f6b7d6}, {0x3da09652}, {0xa6addeef}, {0x40559340}, {0xe6331c8f}, {0xdc366389}, {0xb26982ec}, {0x1c1ef543}, {0xfb9748b6}, {0x15f5c8f9}, {0x2aea749a}, {0xfb403b54}, {0x30bcd768}, {0x69c22fb2}}, {{0xfc6c9789}, {0x8d5beeb3}, {0xbaaede61}, {0x955738fd}, {0x8f77c481}, {0xf28af640}, {0xf6fcf4f2}, {0x514caf54}, {0xbe7eba}, {0x38983483}, {0x2119913}, {0x7c603952}, {0x9df347b3}, {0xffbcde6d}, {0x1c1679b9}, {0x85867524}, {0x94eb3e17}, {0x4b4c9a25}, {0xffd4f7cb}, {0x456d5fa8}, {0xf77b7d97}, {0x2aeb3d8}, {0x30c04883}, {0x637c94bf}, {0xf9c33b86}, {0x17499ecc}, {0x8d800ca3}, {0x4c3cefe8}, {0x8d532982}, {0x4c021944}, {0xefd88037}, {0xbdd6ad93}}}};
static constexpr signed char layer_5_bias[32] = {1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, -1, -1};
static constexpr signed char layer_6_threshold[32] = {4, 0, 7, -8, 8, 1, 6, 3, 4, 3, 13, -13, 12, 8, 8, -7, -8, 10, 5, 6, 11, -18, 14, 4, -1, -10, 4, -2, -3, 8, 7, -8};
static constexpr unsigned int layer_9_weight[32][25] = {{0x7c8e2c24, 0x611be5e1, 0x376f80c5, 0x910f468b, 0xa28d7f00, 0xebd074e4, 0xa7fcac85, 0xa56a36da, 0xab5f86a3, 0xca243a09, 0xa19ae9cd, 0xc4e9aaee, 0xc90fd42b, 0xa71324c0, 0x93059fa9, 0xe71ebc39, 0x9cc9c4e8, 0x853356cb, 0x918994d3, 0xdc5dfb81, 0xa3bcddd1, 0x85dafe9e, 0x37801710, 0x19096a7, 0x550e5b}, {0xe3ae73be, 0xf3be7fff, 0xfa3f5a2f, 0xf998e06b, 0x771c4bd, 0xabea7b34, 0xe9bf7b34, 0xe70b9c3c, 0x23583dc0, 0x8f28468, 0xfa8c7b1c, 0x4188b14d, 0x67f80431, 0x5229a4c4, 0x310089, 0x20192ec0, 0x6d28bd90, 0x4e072ec8, 0x9424c0c3, 0x6348402, 0x568e4183, 0xdfccebd3, 0xae657f36, 0xaa857937, 0xa3d22bd5}, {0x14118041, 0x540088cd, 0x4505511, 0xa2021d00, 0xeb4a7c01, 0x544da4e9, 0x4941048d, 0xdd24f539, 0xc88fafbc, 0xf58c35b0, 0x4e7364d7, 0x227775a2, 0xde4ffaa9, 0xe37fd244, 0xe7a53d20, 0x2ec3b26e, 0xe6002097, 0x5d7ef1ff, 0x8cbf7f8b, 0x13a571b7, 0xabeaa374, 0x63c25cba, 0x5dffd2df, 0x9e2b5bcf, 0xdd803c46}, {0xdf79d7cb, 0xfe0d7f31, 0x638e7f3c, 0x49daa1a4, 0x59fb20cd, 0x471ae9e, 0x2a41174b, 0xca8ce12e, 0x493aa9f5, 0xbf00242, 0x10ca8153, 0x5468e145, 0x7aefb9ff, 0x3a7f60c3, 0x58d980bb, 0xc7b2ee4, 0x691154d5, 0xbff6f4b7, 0x3f5d70c7, 0x4d7e8476, 0x1013808c, 0x5e15afd1, 0xcbff4bfc, 0x6a4fffe, 0xbd7041e}, {0x6aeeebbf, 0x25d288f5, 0xc6fdac2, 0x7677f68a, 0x35287349, 0xe3e243f7, 0x3b7c99be, 0x25518484, 0xbe253481, 0xd577f3ed, 0x29eedba1, 0xaa824f8c, 0x6f500506, 0x65ea0676, 0xd523f6e2, 0xb9f471b1, 0x1c002d6d, 0x6faf6b10, 0x27e607bc, 0x14280c2b, 0x9a30b0c1, 0x2132ea5, 0xa6253f26, 0xe4865836, 0x16a888d}, {0x8b42ad92, 0x11f880ed, 0xc418080, 0x16052003, 0x1106508, 0x77deab75, 0x59d6d1b9, 0x25f4a6d5, 0x36614cae, 0x3154c6c5, 0x2bfb5af1, 0xe1ff5f27, 0x66235f77, 0x64bead14, 0x27d47e20, 0xdfeb5bfb, 0x9aaaf96d, 0xab22da24, 0xd0919024, 0x31cbde8, 0xdd398363, 0xd059846f, 0x80118442, 0x5050a091, 0x467ca2c8}, {0xfe8e7ba7, 0xaf2022c, 0xde34ecca, 0xd17deb49, 0x2d7fc0ea, 0xde8e7f38, 0x25d6cb20, 0x31fc70d2, 0xaaaf7e24, 0x85ffdee, 0xbe5db4aa, 0x81e2a2a, 0x23423610, 0xc8dc8c50, 0x8f737f44, 0xdb4cd36b, 0x44ab1f0f, 0xa8010f40, 0x81518074, 0xa037bac, 0xbe47d1db, 0xcdfe524f, 0xb6014502, 0xc1c88891, 0x2e5efb17}, {0xb1000a9, 0x845daccd, 0x476b44c3, 0xd7556ca, 0xb2045600, 0x27f5ecf0, 0x86fa64ee, 0x586197e5, 0x5d6d0451, 0xd3862f00, 0xaaea2bfd, 0x461182cf, 0xd42b94e9, 0x17079639, 0x73cdabbd, 0xa4a0569e, 0x145e88da, 0xf6657678, 0xdfe76775, 0xcdd77bd4, 0xa7a75bf6, 0x21d68236, 0xa624cd16, 0xd1f2c259, 0xc2043f09}, {0xfa3de2a3, 0x7b8ef7f5, 0x457bb4f5, 0xfb29771b, 0xcb7b25c5, 0xa1e03374, 0xfcf6f2a3, 0xa8f39ee6, 0x947fa301, 0x771034e, 0x2a8e293d, 0xc1b4e8e1, 0x2133c70e, 0xf0368447, 0x92341143, 0x63aa2b0d, 0x67cca0a7, 0x22522d0c, 0x67728c1a, 0xba543c77, 0x7b8e7b94, 0x23e67b32, 0xa7ee619f, 0xa6c67d92, 0x27e66d31}, {0x94a450c, 0x8114397b, 0x75d32674, 0x93095428, 0xea077510, 0xc8837afc, 0xdeb316d, 0xd84ba34e, 0xd7199143, 0xde8a6f32, 0x1c18cfdd, 0x19c98c49, 0x193d80cb, 0xd631e4c3, 0xd809308b, 0x8ca5804a, 0x954a808d, 0x43204c3, 0x5c719489, 0xe77cee97, 0xe3825e32, 0x15d28e1c, 0x15718cc9, 0x11f9b5e5, 0xef46ff8a}, {0xf4af6b0e, 0xf2ae3a2c, 0xe0d28e70, 0xbb8a2f69, 0xead29fd8, 0xd417bd48, 0xda8fe031, 0x6276793e, 0x59ba7ab5, 0x48a86908, 0x9459a50b, 0x8a091343, 0x9204f7ea, 0x1dc895a5, 0x717980cf, 0x14c58451, 0x465f6d3, 0x7adbc4b, 0xc83189c3, 0xe5f9c5f6, 0x15500599, 0xb545f256, 0x45fc9d96, 0x1073a40e, 0xbe7ccd37}, {0xbaae732e, 0xf992fa3f, 0x735c5934, 0xd9a0589c, 0xfa8bbd10, 0xfc8f771b, 0x65ca0934, 0xa5ee8e42, 0x62a4fcd3, 0xce8ea42f, 0x581d6e68, 0xec0fd32a, 0x47ca20d4, 0xcac6a7ad, 0xdcc3a214, 0x12d69581, 0xbe6da2d2, 0xcd280cd, 0xd7759042, 0x8c61a4d3, 0xb400a9d0, 0x9df641e6, 0x1d7384c1, 0xc607706, 0x664a9e6}, {0xde3cfff1, 0xccaf8b6d, 0xe3aefb3a, 0xeddeefc5, 0x4dfa80fd, 0x973566c0, 0xf4117143, 0x4d0e417, 0x259a839, 0x57b85ef, 0x159d1c0b, 0xdaa06210, 0x5ecc293b, 0xb7a40f6, 0xbb569476, 0x559acf40, 0xda485711, 0xdb6dbb8b, 0x5f6b4a8e, 0x5801048c, 0x10fb83cd, 0xe81950f1, 0xce6f79cf, 0x8e667f8f, 0x506b9604}, {0xfa39aff1, 0x97eb5645, 0xca0f3d02, 0x49f88a7e, 0x24fddbcb, 0x1411b450, 0x125854cb, 0xfa020b2e, 0x4d15006d, 0x82580b8c, 0x3217ad5a, 0xd798acd, 0xa20d534e, 0x6d4da039, 0xa28ffb8d, 0xc60e674e, 0x4dfb3245, 0xa701470a, 0xdd5eed51, 0xfe3efbe7, 0xf21a2fce, 0xedee2fee, 0xb2826b16, 0x79fca1bd, 0xfe2d7733}, {0x95400838, 0x5098ac8e, 0x11d18455, 0x9a092749, 0x10598485, 0x1155894a, 0xf328b0b6, 0x23ff12eb, 0x9c3b3ba8, 0x551c0cb, 0xafe64316, 0x67ef7bb4, 0x47f65e66, 0x38f60903, 0x3ba7d334, 0xfaeb5b6f, 0x69b83179, 0x630803ee, 0xd1c3a995, 0xbe2dfa7b, 0xd11b860e, 0x7a7821cd, 0x1209140f, 0x3c1c84b2, 0xe55ce7e3}, {0xfa998f51, 0x80ba83a8, 0xb6257c00, 0x13e1ce4b, 0xe24dbbab, 0x1528a540, 0xfc399ccb, 0xb2317309, 0x7ceb4074, 0x3771bbcf, 0x573c0c43, 0x94b98c81, 0xa222779c, 0x21978e92, 0x7a3edb64, 0xf6c5f5ed, 0x752b42cc, 0xa7017602, 0x2990e030, 0xcb9bfb51, 0xe15ffbeb, 0x9d274e0c, 0xe2114500, 0xd15aac7d, 0x7a5d5ba1}, {0x4758008d, 0x3098242b, 0x1510054, 0x9a006438, 0xdb802f30, 0x48f082c7, 0xde6cf3bb, 0x9f1d85df, 0x1eedb8af, 0x57a5d233, 0x1f9a0e7, 0xbab594ca, 0xdbee9e3e, 0x14f3cbf3, 0x77975666, 0x41e34234, 0xe7941752, 0xbfbecadd, 0xb0dbfbb2, 0xef8794de, 0xcc7642bc, 0xb6841614, 0x41f39b5c, 0x62f3df82, 0x11318419}, {0xa59bf5db, 0x844f3ed4, 0xdaef7baf, 0x6cf7f3ce, 0x1d7594ff, 0xaeea7276, 0x83570b0c, 0x4321ac73, 0xa6817d94, 0x21568524, 0x538aa048, 0x3254b109, 0x88a42791, 0x87227688, 0x62000900, 0x6bfac0f7, 0xbcbf1402, 0x8e096726, 0x1b141427, 0x22046911, 0xabfaa3b6, 0x21ecfe33, 0xfa29bffb, 0xaba7fe11, 0xe3867b14}, {0x34c248e6, 0x14710438, 0x1188044a, 0x43105c9, 0x34158463, 0xb685d293, 0xab5e84ce, 0x8795bdda, 0x27f65cbc, 0x20719eaf, 0xee877976, 0x2bde79be, 0xe1946b34, 0x1f276f34, 0x61867916, 0xefaffb37, 0xe3e64a2e, 0x45b680b1, 0xa3852fc3, 0xb2853b25, 0xc2ab1f3e, 0xd9f880ed, 0xdda986e9, 0xbc39c741, 0xfef8ff10}, {0x25d64c8c, 0xb5b754d2, 0x856d469a, 0xb65794c0, 0xad05c422, 0xafae4b7f, 0x3d7e1fac, 0x9fb909d, 0xd6fdd303, 0x3c2edad9, 0xeecc7f74, 0x70d61c24, 0x695954c4, 0xb437830e, 0x85f4dfde, 0xfaae7b5f, 0x2a8e5d6e, 0xa5951434, 0xa5e65cf4, 0x63c7bbcd, 0xe73e7f26, 0x29a290c, 0xf281f720, 0x59ca0525, 0x7810bc4c}, {0x9111a390, 0xe2bf1784, 0x3992ad39, 0x41889d71, 0x86c4b9d8, 0x3404b5d3, 0x723afd72, 0xacfcbd3a, 0x5d7080d7, 0x76698bc2, 0xb34f3f1a, 0x9accfdd, 0x5b9991e9, 0x3ca784e3, 0x1e7bc38f, 0xf68f7f12, 0x65fef35e, 0xe7f49dd6, 0x7cfd0d4a, 0xfdfef3f7, 0x864b2be8, 0xddc64bc9, 0x51a08fbe, 0x55f1a9a5, 0xde75b773}, {0xfc25ab73, 0x6aaa5b0c, 0xd2262904, 0x594e850, 0x14fa8bef, 0x140515eb, 0x2308205b, 0xe25a3f51, 0x5cebb0ed, 0x1578a9ef, 0x36072cd3, 0x60e6680f, 0xc8f8a8a1, 0x3cff4c61, 0xa6feffda, 0xa6cf2bdb, 0x69fbe2ad, 0xc74da8c4, 0x2e6712d4, 0x2e2ff18b, 0x3623832a, 0xf96d52cf, 0xbf67c9ab, 0x7e4be283, 0xbf75f663}, {0x975dfdd3, 0x5eaf5fbb, 0xe888a17d, 0x228a29f5, 0x1f780f7, 0x543497c2, 0x7ee41933, 0xa2d6fa53, 0xb9a5b3c, 0x21b24036, 0x464b8400, 0xe774f682, 0xa28afe18, 0x93864b2c, 0x27804d10, 0x39386ff, 0xabb05400, 0x802e9a, 0x5180b11c, 0x3394ad23, 0x40da002a, 0xfb68d439, 0xff9bcee9, 0x9edfafed, 0xbf175634}, {0x7607690b, 0x41da80cc, 0x9c7de1c3, 0x3d6776de, 0xa3de5a2f, 0x5400b52a, 0x4db88db, 0x36b474c1, 0xb6855e2f, 0xb496f909, 0xab7b4475, 0x97db488d, 0x2ce2760e, 0x608676d2, 0x7aa45f40, 0x6bf77df7, 0x94567f2e, 0xb20450c, 0xebb0a130, 0xdb8c6d3d, 0xab0573f0, 0xd3ea5eaf, 0x76550508, 0xdd747231, 0xa28edf8a}, {0xa35eefa7, 0xe7fffd97, 0xcdefea8f, 0x5fffcb67, 0x2c1186dd, 0x23a26b3c, 0xbebe7b96, 0xddadaee, 0x38753143, 0x950474c, 0xb90afb0f, 0xda0eabd9, 0x6522040e, 0x38552073, 0x960b41d8, 0xf00f7b6d, 0x5f3aab51, 0xa782370e, 0x29d084d1, 0x961b178b, 0xd8d724a, 0xff2bf36f, 0xa6846f0a, 0x61d4a87c, 0x365fdb4a}, {0xcbbeeef3, 0xefc60a74, 0xa5eaec56, 0xa75ef5d2, 0x5538537c, 0x48fe533f, 0xd0bc5b7e, 0xa99ec9ba, 0xe60aefae, 0xb5cfb576, 0x417800ac, 0x7e4d6313, 0xf2ce1e19, 0xd07a3f0c, 0x43902634, 0xd78008d, 0xba012541, 0xc88e0bc0, 0x62a801ac, 0x9010428, 0x1c9084c9, 0xae55f1d2, 0xc2e7d2ab, 0xa6267b12, 0x11f8803d}, {0xfd15e6c1, 0x18816304, 0x4190a114, 0x6b1a0d3c, 0x417280ed, 0x956580c1, 0xd8144173, 0x23827e91, 0x4bd6ab1d, 0x1704965, 0x17c0c4c2, 0xb3257511, 0xaa86ef1f, 0x64d25b25, 0xab104d26, 0x5f9950d, 0xebb77513, 0x9ed37f8c, 0xbf0b1b40, 0xbb181549, 0xd1f890ed, 0xee445113, 0xebde2815, 0x6b7f69fe, 0x19eb003d}, {0x14018010, 0x34500059, 0x90900518, 0xf2848cb0, 0x53aee9bd, 0x900880c9, 0x16406458, 0x5abf2d3f, 0x4aa889ef, 0xf52ff4f3, 0x245344d0, 0x7cc300c3, 0xce7a10f4, 0x867eebe8, 0x2de516d7, 0x22773011, 0xa04a9ff, 0x5ffcbde7, 0xee6b7f6e, 0x9da7ce37, 0x92155711, 0x794ea1b1, 0x5ffff0fd, 0x1e6b5eea, 0xd951958e}, {0xeeaf773e, 0xe1420b2d, 0xb20c2b33, 0xc18c4e18, 0xe08eed6f, 0xf60c2f2a, 0x31302005, 0x8440ad31, 0x628ad69d, 0x9ccfe08d, 0x505d9509, 0x7746622e, 0x994c2105, 0xd63195bc, 0xdf7d20f4, 0xd2599483, 0x3a6d29e6, 0x7e29a1e3, 0x1557b2cb, 0x5eaaa9eb, 0xd41101c3, 0xc3ff50ee, 0x1d6150ed, 0x3a355723, 0x974e1e7}, {0x6b9b88d4, 0x1d789cc1, 0x547ff8e7, 0x1ee75712, 0x81045f00, 0x6baafb37, 0x9def652e, 0x75c9423, 0xbd27d436, 0x21047b02, 0xebbe91e5, 0xb53dcd9e, 0x9d192e13, 0x97837f1a, 0x22822d09, 0xebbed1b4, 0x93f61c1c, 0xdaee6242, 0xf911ef51, 0x62843bc4, 0xe3eeff34, 0x25fe1a9e, 0x25ba8411, 0xefa35e1b, 0xe7847fd8}, {0x1d48818a, 0xf33d75b2, 0x25d98084, 0x9a09002f, 0xd2292200, 0xd70daf5, 0xdced33a4, 0xada6d22e, 0x54678beb, 0xca914e00, 0xb000e31f, 0xb9f5c0df, 0xfa5ffbce, 0xbd8da7, 0x302950db, 0x3c244f08, 0x3587d150, 0xb7d2461e, 0xb1fcbd89, 0xa5d7d536, 0x63666b1c, 0xafa66f12, 0xab9eceff, 0xb5b8adf4, 0xaf956e36}, {0x255180cd, 0xac251d1a, 0xdb8f523f, 0x64de81d1, 0x15b504db, 0xa9e4a910, 0x427761a, 0x50de6a6d, 0x749b6ecc, 0x457d80c5, 0x2c9a7f16, 0xfb406c3d, 0xdfdaea35, 0xce49f384, 0x25b4f1d7, 0xeea07b26, 0xebc0b36d, 0x4feeb2f4, 0xdeaf7b4a, 0xa11bb996, 0x50820a2e, 0x5911bcc1, 0xdcedfae3, 0xde6fd38b, 0xd1114504}};
static constexpr signed char layer_9_bias[32] = {-1, 1, 1, 1, -1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1};
static constexpr signed char layer_10_threshold[32] = {-59, -34, -7, 6, -24, -37, 20, -40, -26, -91, 1, -31, 33, 28, -15, 25, -14, -7, 26, 13, 54, 20, 40, 21, 0, -6, 43, 27, -17, -17, -16, 20};
static constexpr unsigned int layer_11_weight[10][1] = {{0xdcb1dcca}, {0x78b8ae6f}, {0xdef57e8e}, {0xdaad8cea}, {0x52bd4e89}, {0xa165bc1b}, {0xceb564c8}, {0xac0ff759}, {0xdd41f0c7}, {0xa0e7ea66}};
static constexpr signed char layer_11_bias[10] = {1, -1, -1, 1, 1, -1, -1, 1, -1, -1};

static int layer_2_output[26][26][32];
static unsigned int layer_3_output[26][26][1];
static unsigned int layer_4_output[13][13][1];
static signed int layer_5_output[11][11][32];
static unsigned int layer_6_output[11][11][1];
static unsigned int layer_7_output[5][5][1];
static signed int layer_9_output[32];
static unsigned int layer_10_output[1];
static signed int layer_11_output[10];


void predict_cnntest_fashion(int const * const x, int * pred) {
    auto layer_0_output = x;
	
    // Layer 1: Reshape
    auto layer_1_output = (int (*)[28][1]) layer_0_output;

    // Layer 2: Conv
    for (int h = 0; h < 26; h++) {
      for (int w = 0; w < 26; w++) {
        for (int m = 0; m < 32; m++) {
          layer_2_output[h][w][m] = layer_2_bias[m];
        }
        for (int kH = 0; kH < 3; kH++) {
          for (int kW = 0; kW < 3; kW++) {
            for (int c = 0; c < 1; c++) {
              for (int m = 0; m < 32; m++) {
                layer_2_output[h][w][m] += layer_2_weight[kH][kW][c][m] * layer_1_output[h * 1 + kH - 0][w * 1 + kW - 0][c];
              }
            }
          }
        }
      }
    }

    // Layer 3: Step
    for (int h = 0; h < 26; h++) {
      for (int w = 0; w < 26; w++) {
        for (int c = 0; c < 32; c++) {
          if (layer_2_output[h][w][c] >= layer_3_threshold[c]) {
            layer_3_output[h][w][c / 32] |= (1U << (31 - c % 32));
          } else {
            layer_3_output[h][w][c / 32] &= ~(1U << (31 - c % 32));
          }
        }
      }
    }

    // Layer 4: MaxPool
    for (int h = 0; h < 13; h++) {
      for (int w = 0; w < 13; w++) {
        for (int c = 0; c < 1; c++) {
          layer_4_output[h][w][c] = 0;
        }
        for (int kH = 0; kH < 2; kH++) {
          for (int kW = 0; kW < 2; kW++) {
            for (int c = 0; c < 1; c++) {
              layer_4_output[h][w][c] |= layer_3_output[h * 2 + kH][w * 2 + kW][c];
            }
          }
        }
      }
    }

    // Layer 5: Conv
    for (int h = 0; h < 11; h++) {
      for (int w = 0; w < 11; w++) {
        for (int m = 0; m < 32; m++) {
          layer_5_output[h][w][m] = layer_5_bias[m];
        }
        for (int kH = 0; kH < 3; kH++) {
          for (int kW = 0; kW < 3; kW++) {
            for (int m = 0; m < 32; m++) {
              for (int c = 0; c < 1; c++) {
                layer_5_output[h][w][m] += 2 * __builtin_popcount((unsigned int)~(unsigned int)(layer_5_weight[kH][kW][m][c] ^ layer_4_output[h * 1 + kH - 0][w * 1 + kW - 0][c])) - 32;
              }
            }
          }
        }
      }
    }

    // Layer 6: Step
    for (int h = 0; h < 11; h++) {
      for (int w = 0; w < 11; w++) {
        for (int c = 0; c < 32; c++) {
          if (layer_5_output[h][w][c] >= layer_6_threshold[c]) {
            layer_6_output[h][w][c / 32] |= (1U << (31 - c % 32));
          } else {
            layer_6_output[h][w][c / 32] &= ~(1U << (31 - c % 32));
          }
        }
      }
    }

    // Layer 7: MaxPool
    for (int h = 0; h < 5; h++) {
      for (int w = 0; w < 5; w++) {
        for (int c = 0; c < 1; c++) {
          layer_7_output[h][w][c] = 0;
        }
        for (int kH = 0; kH < 2; kH++) {
          for (int kW = 0; kW < 2; kW++) {
            for (int c = 0; c < 1; c++) {
              layer_7_output[h][w][c] |= layer_6_output[h * 2 + kH][w * 2 + kW][c];
            }
          }
        }
      }
    }

    // Layer 8: Reshape
    auto layer_8_output = (unsigned int (*)) layer_7_output;

    // Layer 9: Gemm
    for (int d = 0; d < 32; d++) {
      layer_9_output[d] = layer_9_bias[d];
    }
    for (int d = 0; d < 32; d++) {
      for (int i = 0; i < 25; i++) {
        layer_9_output[d] += 2 * __builtin_popcount((unsigned int)~(unsigned int)(layer_9_weight[d][i] ^ layer_8_output[i])) - 32;
      }
    }

    // Layer 10: Step
    for (int d = 0; d < 32; d++) {
      if (layer_9_output[d] >= layer_10_threshold[d]) {
        layer_10_output[d / 32] |= (1U << (31 - d % 32));
      } else {
        layer_10_output[d / 32] &= ~(1U << (31 - d % 32));
      }
    }

    // Layer 11: Gemm
    for (int d = 0; d < 10; d++) {
      layer_11_output[d] = layer_11_bias[d];
    }
    for (int d = 0; d < 10; d++) {
      for (int i = 0; i < 1; i++) {
        layer_11_output[d] += 2 * __builtin_popcount((unsigned int)~(unsigned int)(layer_11_weight[d][i] ^ layer_10_output[i])) - 32;
      }
    }


    for (int i = 0; i < 10; i++) {
        pred[i] += layer_11_output[i];
    }
}

}