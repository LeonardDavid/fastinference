{#
 # Maximum Pooling, unrolled loops
 #}

// Layer {{ layer_id }}: MaxPool
{% for c in range(output_shape[1]) %}
  {% for h in range(output_shape[2]) %}
    {% for w in range(output_shape[3]) -%}
        {%- set count = [0] -%}
layer_{{ layer_id }}_output[{{ c }}][{{ h }}][{{ w }}] =
      {%- for kH in range(kernel_shape[0]) -%}
        {%- set iH = h * strides[0] + kH - pads[0] -%}
        {%- if iH >= 0 and iH < input_shape[2] -%}
        {%- for kW in range(kernel_shape[1]) -%}
          {%- set iW = w * strides[1] + kW - pads[1] -%}
          {%- if iW >= 0 and iW < input_shape[3] -%}
              {%- set _ = count.append(count.pop() + 1) %}
 std::max(layer_{{ layer_id - 1 }}_output[{{ c }}][{{ iH }}][{{ iW }}],
          {%- endif -%}
        {%- endfor -%}
        {%- endif -%}
      {%- endfor %} std::numeric_limits<{{ output_type }}>::lowest()
      {%- for c in range(count[0]) -%})
      {%- endfor -%};
    {% endfor %}
  {% endfor %}
{% endfor %}
