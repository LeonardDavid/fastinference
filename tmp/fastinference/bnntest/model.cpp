#include <math.h>
#include <stdint.h>
#include <limits>
#include <algorithm>
#include <cstdint>

namespace FAST_INFERENCE {

static constexpr signed char layer_2_weight[3][3][1][32] = {{{{-1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, -1, -1}}, {{-1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, -1, 1, 1}}, {{1, -1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, 1, 1, -1, -1, 1}}}, {{{1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, 1, 1, -1, -1, -1, 1}}, {{1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, -1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1}}, {{-1, -1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, -1, 1, 1, -1}}}, {{{-1, -1, 1, 1, 1, -1, 1, -1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, -1, 1, -1, 1, -1, 1, 1, 1, 1, -1, -1, -1, 1, 1}}, {{1, 1, -1, 1, 1, 1, -1, 1, -1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1}}, {{-1, 1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, -1, 1, -1, 1, -1, -1}}}};
static constexpr signed char layer_2_bias[32] = {-1, 1, -1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
static constexpr signed int layer_3_threshold[32] = {-8682, 38822, -51819, 13090, 24529, 4484, -6870, -23822, 5948, -12553, 30777, -24362, -19314, -33549, 28676, 8183, -81170, 29041, -25089, 81667, -9868, 21265, -32555, 56351, -11204, 4090, 6115, 9909, -36868, -22332, 14003, -9353};
static constexpr unsigned int layer_5_weight[3][3][32][1] = {{{{0x3549ca89}, {0x8eb1559f}, {0xe5aae09}, {0xc403603b}, {0x6555abc6}, {0x7c04a27e}, {0xb72587fb}, {0x30a1234c}, {0xcece3f9}, {0xc17d720f}, {0x672cabcc}, {0xb829e15a}, {0x255c8806}, {0x7308dad}, {0x5cdc3bd0}, {0xd2f8452}, {0x7b06ac6d}, {0xe762a0ce}, {0xb70e90db}, {0x3e411400}, {0xea5c928c}, {0x95edf8fe}, {0xb441e9ce}, {0x9d1a2a0e}, {0xa3f1fb1}, {0xb8c997e7}, {0x10a2116e}, {0xae10d685}, {0x6972b7d5}, {0xe30697d3}, {0x7d6959e9}, {0xc2305592}}, {{0xe5e8fe4b}, {0xc18361f0}, {0x2a9f5b2b}, {0xc89c037b}, {0xcca8b3ce}, {0xad9aae7e}, {0xec336fcd}, {0xf029931e}, {0x11437dbb}, {0x5fbebc9}, {0x2fd1aac9}, {0x8c3b9b14}, {0x47047e21}, {0xa86b98f}, {0x9ee831ed}, {0xb657ea31}, {0xa0d4aceb}, {0xaed593c5}, {0x1a960135}, {0xe1188fa6}, {0xac8f978f}, {0x90b54024}, {0x54e261e2}, {0xbcaaa75d}, {0xd2a30959}, {0x4561b3ea}, {0x52c56853}, {0xde92d770}, {0xc74c64d1}, {0x7c62570c}, {0xd25eda8a}, {0xd5165414}}, {{0x7d3185d9}, {0xe3ccac3b}, {0xcbfe3b02}, {0x5d93f57b}, {0x8efb21eb}, {0xa1d68a03}, {0x4c005152}, {0xda38dbd6}, {0xe1a9cd68}, {0xc92935e2}, {0xfa5f8eaf}, {0x6103513e}, {0xc8a35512}, {0xa4cfb6e6}, {0x8f4db0e6}, {0x3710cc84}, {0xbf59a68b}, {0x5fe0446b}, {0x9654ce15}, {0xc48d14cd}, {0xcf38a70e}, {0x23eeaaf7}, {0xdda325f7}, {0x94480961}, {0xa8b1bfb}, {0xc4112fcf}, {0xc8bf343d}, {0x6c3a1561}, {0x61285592}, {0xd8a3751a}, {0x7754ddbe}, {0x43405534}}}, {{{0xffddbb88}, {0xd3f6e72d}, {0xa9adaf8d}, {0xbadd0deb}, {0xcfeb2a5f}, {0xee7aeb7f}, {0x60f0e5fa}, {0x4d7a8300}, {0x12d4beeb}, {0x8ae9cbeb}, {0xb4fdeaeb}, {0xa6eda611}, {0x851fcad4}, {0x1abfdbee}, {0x4e5833d8}, {0xe7477017}, {0x787bf543}, {0x1c2355c6}, {0xef675a99}, {0x8edfaf4f}, {0x3c8a23cb}, {0xb705d546}, {0xfdeffb9e}, {0xa6d8a82d}, {0x45b81fa}, {0xd9a35552}, {0x1a377967}, {0xe77b58b0}, {0x6790b614}, {0xd953291a}, {0x594214b0}, {0x52f27d15}}, {{0xbf9daa2f}, {0xc2bfc73e}, {0x2f97aa69}, {0x2bfd8fff}, {0xc95bf4b}, {0xe39edf14}, {0xc6983494}, {0xf09bc36c}, {0xffffaf88}, {0x8e933d6c}, {0xb4bf8a97}, {0x2ed4aa29}, {0xd5d29df1}, {0x348d4feb}, {0x8aa03330}, {0x63769e35}, {0x19e145f2}, {0x9eeb49e2}, {0xde30c443}, {0xc8a511ee}, {0xc80881a6}, {0x335d643f}, {0xf8815dea}, {0x14afc3f6}, {0xdee1ebe3}, {0xdef91d7b}, {0x3ef57f66}, {0xc2122537}, {0x880c394d}, {0xaad55e19}, {0x84335794}, {0x50604494}}, {{0xafdcaa09}, {0xf6dfcd9b}, {0x277d8a6f}, {0xab54ab6b}, {0xca81a3a9}, {0x755c8211}, {0x7ffba76a}, {0x5001159e}, {0x73ebff8f}, {0x8a8121ed}, {0xff9b8500}, {0xeedcab39}, {0xca927d51}, {0xa82d91ee}, {0x9c3fff5b}, {0x934eb496}, {0xde07ffca}, {0xb8cd73d5}, {0x67c4fc19}, {0x9e8339eb}, {0xac3998ca}, {0x277ede15}, {0x1bdf5b7b}, {0x86aa3ac1}, {0xdd6f737b}, {0x598139e2}, {0x89b92f2b}, {0x42694a71}, {0x6402d894}, {0x8cf93ec9}, {0x4cc261c2}, {0x62c41e31}}}, {{{0xfbb79f46}, {0x2f3eaa71}, {0x8c69166a}, {0xc9770e33}, {0x8c7ea5bf}, {0x7133c592}, {0x75caa39}, {0x23888208}, {0x1e9d69e9}, {0xff57f8ac}, {0xfcc7e172}, {0xac59aa37}, {0x844832d5}, {0x8c9d2be8}, {0xdee471d6}, {0xe2d43e11}, {0x998749f9}, {0xccc268fe}, {0xf4225572}, {0x4f5171cb}, {0xfbe5c967}, {0x192654f6}, {0x5522a094}, {0x9d4ba1cc}, {0xead70bfb}, {0x97d92e7b}, {0xf3b7adc8}, {0xdec072b1}, {0xcd08f494}, {0x3b15a9cc}, {0xd202551d}, {0xd0fa75a2}}, {{0xe2a3a7ac}, {0x25c796fc}, {0x618309ce}, {0xf3efced6}, {0xdcf8e32f}, {0xe11bc494}, {0xe3fce23e}, {0x3d84f1c}, {0x3aedd8c5}, {0xdc3f9dea}, {0x58a15546}, {0x6defcb1f}, {0x4a78cf3b}, {0x1eb5336a}, {0x4ed133e0}, {0x211ed694}, {0xb0aa78c0}, {0xfa734955}, {0xd88318b4}, {0x4bff3b6b}, {0xab9a369}, {0x1155c9a2}, {0xbe7f6066}, {0x5da301ce}, {0x4ed9ba2b}, {0x287f9b59}, {0xeba12b8d}, {0xc23e4e50}, {0xd05f7693}, {0x32f9aaed}, {0x937a7d95}, {0xcd047504}}, {{0x815dce2a}, {0xf6b2cd17}, {0x6d0ee26f}, {0xb8d4baeb}, {0xdda317fb}, {0xd4035f75}, {0xbfb8f3f}, {0x548b8716}, {0x3f1793ea}, {0xceab29ea}, {0xf8437f51}, {0xe7dfc88c}, {0xa7f6ae3b}, {0x142122d1}, {0xbea1297d}, {0x955774dd}, {0xb0e35de8}, {0xfa5af5d5}, {0xf0344ae9}, {0xcee98a79}, {0x7cf183ea}, {0xf763c4b7}, {0xeffcb21f}, {0x7cb53b5b}, {0x6ff9aefc}, {0x674d3dcd}, {0xd4c004f}, {0x12c82a01}, {0x512a5771}, {0x7588289}, {0x934a7123}, {0x8dc6ae3}}}};
static constexpr signed char layer_5_bias[32] = {1, -1, 1, -1, -1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, -1, 1, -1, 1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1};
static constexpr signed char layer_6_threshold[32] = {32, 15, 21, 14, 8, 10, 10, -18, 17, 7, 16, 16, 8, 0, -3, 21, 4, -4, -1, 5, 6, 7, -3, -9, 9, -4, -5, -10, -4, 13, -2, -19};
static constexpr unsigned int layer_9_weight[32][25] = {{0xba42b7fb, 0xbec5ba7f, 0x35992081, 0xab19040c, 0xc31bc27b, 0xb91a72b4, 0xb11c0830, 0x86310408, 0xe73d0801, 0xb2310814, 0xff761dc0, 0xb7242811, 0xffd58616, 0xa5b049d7, 0xb4e5ad00, 0xff765ffc, 0xf9bc7860, 0xebeccbd4, 0x182c4bf3, 0xe3d7f901, 0xf5fdfd12, 0xedb18983, 0xa913405c, 0xb100c2d, 0x8fe400b2}, {0xe98c8913, 0x2c2d5c42, 0xf62dfd88, 0x6a3ffbdb, 0x6deefa0b, 0x25a1b404, 0x60c4f50b, 0xa0a0b6c7, 0x4bc61db0, 0x71ced2ef, 0xa07368b, 0x2c6d3df, 0x98823065, 0x8cff839c, 0x3b72b479, 0x2a0a53ff, 0xbefa43f7, 0xb4b1146d, 0xf6f6a08, 0xa433246a, 0xc0db0334, 0xbda90084, 0xc789bc0c, 0xa627af93, 0x14068dd9}, {0x436a8b7d, 0xbb32c2bd, 0xc711c4d3, 0x428223d3, 0x94800504, 0x87f87eee, 0xfebf6bdc, 0x6fd9b3af, 0x609610f, 0x94413518, 0x6da1b4c5, 0x6639a41a, 0x4519e657, 0x4bc91134, 0x5f4ec21f, 0x2173884, 0x404602eb, 0xb4d3c461, 0x88e7e518, 0x5284fb7f, 0xf8f7a87, 0x18cafbc8, 0x9d76fbdf, 0xddceeaf7, 0xde5984e3}, {0x927bffe4, 0xf653b3ad, 0xa310104c, 0xd04103, 0x24d59e0a, 0x9a720fe4, 0xbd5713fc, 0x1f56d98c, 0x530ee35b, 0x861a84db, 0xf7d90d30, 0xb7b9cd0c, 0xf71902dd, 0x73ce5bf5, 0xf4e26b55, 0xd2e42d9d, 0xb43921e4, 0xb7b4c508, 0x2d42f294, 0x417b6e0, 0x5d96f167, 0xec677d18, 0xfef6ed4f, 0xc63ca56f, 0xc619444c}, {0xc7c5f8aa, 0xc4290674, 0xc910410, 0xc7d8a615, 0x8619245f, 0x6895609, 0x6400, 0xa518040b, 0x81701805, 0x6bd40b14, 0xadb87f, 0x4018a437, 0xc01b3236, 0xacd511e0, 0x9e41b80, 0xbacb0887, 0xf0edb424, 0xaca40d08, 0xc535ad08, 0xf0c670a, 0x614a9b7c, 0xe8fef9ee, 0x4f36fa43, 0x919ea0c, 0x7e100a25}, {0x97596810, 0x949d1629, 0x639a41a, 0xf49b34fb, 0xdb1f778c, 0x44c0ac1b, 0x44218447, 0x40f9dc1d, 0xe4b064df, 0xfef02c91, 0x494cf, 0xb4865, 0x43ced0ef, 0x2682f39f, 0xe4e61384, 0xaa5c79ac, 0x311f1a80, 0xca682e14, 0xb5010275, 0xda9e7b0, 0xa5396cb2, 0xe9b5748c, 0xb291254f, 0xa421f50b, 0xd15278b}, {0x793c0124, 0x49bce6ac, 0x9a52f18a, 0x1a861bcf, 0x20100c04, 0x22f5e5d2, 0xdecaafff, 0x5bce5ef7, 0x38c7d720, 0xbce4f7c1, 0xef955ba7, 0xaaf6ddb3, 0x7c64f1b8, 0xdebcff07, 0xcb18a4bf, 0x2afc233, 0x4b42da9f, 0x4c4a36ff, 0x9ac6f6f3, 0x77c5196c, 0xb3035, 0x439acaef, 0x5ec0b265, 0x98ce5ba1, 0x78c2d3f7}, {0xe47c3d2c, 0x90f3081d, 0x29b55905, 0x28161124, 0x35741c26, 0xfd853259, 0x194049f0, 0x2b5a1bb4, 0xb141be6, 0x4048c62, 0xebf0e53b, 0xfd306c20, 0xf691041c, 0x9509060c, 0x61b611b, 0x473c9423, 0x6701a41b, 0x525a00b, 0x41596d08, 0x7f536add, 0x51b0e607, 0x25183421, 0x4201044d, 0xe16c0d14, 0xbbd65f55}, {0xf86f7f79, 0xab52b59e, 0x496619dd, 0x3444ff27, 0x25e40a21, 0x967290fc, 0xb73609ec, 0x1b56539c, 0x1106f3eb, 0xf0be66a, 0xfd9351f9, 0xfd39ad8c, 0x271122cd, 0x95db27fc, 0x4bd9355f, 0xdd85ec69, 0xa523a40f, 0x40022043, 0xaad49816, 0xffe6de97, 0x4fe7025f, 0x20eb7a7, 0x300fe12f, 0x97e2f2c1, 0xb39104db}, {0x9a0e4746, 0x5ebf2c43, 0xf5b99ef2, 0x5f81b67b, 0x47b314d6, 0x3c806aef, 0xd4bd7e60, 0x55a5ed0b, 0x54a1e51b, 0x8c9bf7db, 0x242dc7d6, 0x2a6d1be, 0x966db6b, 0x111af3ff, 0x5bcaabff, 0xa85c4320, 0x1acf53a4, 0x4b5a73f7, 0x719402f6, 0xbcac06f1, 0xd282e30, 0xb81e0e25, 0x2297ffeb, 0x903ff57b, 0xa401a103}, {0xf2cb986a, 0xb282456, 0x2afc5b8d, 0x4ae66dd5, 0x8f846914, 0x20f32c1, 0x4248e954, 0xbac6f7b7, 0xfbc61be5, 0x4be67ba5, 0xfb5f486c, 0x3bc67399, 0xec12f6e0, 0xbef098c0, 0xbf789a70, 0x4d0dfd1a, 0x47222713, 0x7440a673, 0x2defd825, 0xaff6ca63, 0x928a92f2, 0x4a4ed3ff, 0x7842ede3, 0xbe67fab0, 0x127a29e2}, {0xa8b625ea, 0x98ac4120, 0xbcd6f2a2, 0x34e4cd47, 0xa1100f45, 0xbdf2fb6e, 0xe9b7cb54, 0x5fbd12ec, 0x810df2aa, 0x8435ec01, 0xeda4b49b, 0xe4a12413, 0xf6190408, 0x470d159c, 0x609e55b, 0x28e2287, 0x880ab32, 0x9ce5714b, 0x4e1da51b, 0xd25a3adf, 0xb7011524, 0xecd11b23, 0x8b790b15, 0xfb9059d6, 0x57dbd4b1}, {0xcdbd2928, 0x88654088, 0x8d5a6119, 0x8466398d, 0x4d2280c, 0x4d0491df, 0x5b8879b5, 0x7bda1bf7, 0xbb560ae7, 0x61f45181, 0xbada78d0, 0xbad14020, 0xabdef31c, 0x9c2177f3, 0x99c0298, 0xee613312, 0x4520ae0a, 0xc62b6e84, 0xbc91876c, 0x8fadf41c, 0x10391046, 0x125492b4, 0x4fdc8061, 0x5d6c0984, 0x1e6aabe4}, {0xaa47cafb, 0x76679387, 0x534c83a6, 0x37ec5eac, 0xad639c2c, 0x7b2751c3, 0xfe1a4ed8, 0xbbb100a4, 0x7ff71324, 0x9f35ff6e, 0xfbd6f9fb, 0xb69164f0, 0xb4b19c00, 0xeeb71c84, 0xcf1b6702, 0xcfd662c7, 0x4645c1db, 0x4c27956a, 0xef7fc907, 0x4aef09d9, 0x92801afd, 0x438b1ab0, 0xd3f10c45, 0x9c216d8, 0x59e6dbfc}, {0x2a655796, 0x43663abe, 0x49665bdb, 0x38e6f9f3, 0xb0e49ea1, 0x7b5d0869, 0x93982fa4, 0x6b5a1214, 0x1195d2eb, 0x2243332, 0x2d7eb98e, 0xb52dfea9, 0x6a2690d, 0xe519974c, 0xc00927df, 0x1a1d1a1, 0xb3fc1dc0, 0xa95833e3, 0xa5756911, 0x4750513, 0x7f2ee3c6, 0x1665f960, 0x2c2fed49, 0x4107f9a3, 0x120ed7c1}, {0xd290ced, 0xc82f0420, 0xcd26e059, 0x8411f5cf, 0xda1804d2, 0xf4d4a71a, 0x853de40c, 0x4e50f22a, 0x85980075, 0x29f50a04, 0xa4a11116, 0x2e6999e, 0xd26efbdf, 0x5948860, 0x20a61d00, 0xb0461b2e, 0xbed673f4, 0xbdfb0bb4, 0x3dac5588, 0x402e7508, 0x4d6ad9ea, 0xed36d9ca, 0xd6ceada, 0x27202d84, 0x770fa459}, {0x81049608, 0xa4310010, 0x3000205, 0xd59ba2b3, 0x12990274, 0x5505e6d3, 0x88914103, 0x2b702801, 0x3110830, 0x24e5230c, 0x921840b, 0x1401a45d, 0xe6992405, 0x9709042c, 0x48ac734a, 0x18d22f7, 0x4489240b, 0x4a5ac0b, 0xc2392c18, 0x4a02735e, 0x38340a, 0x2092192d, 0x4713639f, 0x6f7e3804, 0xc3db201d}, {0x57952529, 0x409816c, 0x13d3d41f, 0x4243283f, 0x5e5900a5, 0xed9c082c, 0x85382410, 0x4fd92c1c, 0xbd95182c, 0xbea44404, 0xff7389a8, 0xe5b04c20, 0x6e75fd18, 0x853166df, 0xd2d02b8, 0x6b07ad, 0x42cfb81f, 0x4b0bbb9f, 0xb020a663, 0xebebc90c, 0x2c901e28, 0x1310f32e, 0x931a52e5, 0x1b1e80f0, 0x1bc69a71}, {0x71a84215, 0x4c654f5b, 0xf6b16f91, 0xeebb64db, 0x5edbeede, 0x2629c01f, 0x4042b413, 0x5081e647, 0xfcf69d94, 0x7be6db95, 0xfa2b7, 0x40ced2f7, 0x1862f126, 0x68e69854, 0x3be6da26, 0x635ed2a5, 0x48ced3ca, 0xb04674f6, 0x98d96708, 0x142c82aa, 0x924316c0, 0xc3181ba2, 0x9acff6fa, 0x97a6f15b, 0x928614f}, {0x8c616c4e, 0xcf73337b, 0x8b52610a, 0x985238cf, 0xeb66989, 0x26e23a92, 0xbee92fc, 0x5b5adbd6, 0xfa662bf5, 0x7bfe1bf1, 0x9a9a2bcc, 0xfade9ba6, 0x6b7edbf7, 0x79c6d2d7, 0xbed49fe4, 0xbff2dfae, 0xbbfedaee, 0xff78cad4, 0xffc51af4, 0xbc24a620, 0x7ff0c3e2, 0xfef0c49a, 0x356def4a, 0x8e37e64b, 0xc4296409}, {0xc7008f4c, 0xd1b60b74, 0x717fb9e2, 0xc4a7db7b, 0x25a5ddda, 0x85d8eda0, 0xb73946bc, 0xf7b33218, 0xc48f5793, 0x8409e673, 0xa4e525c2, 0x6425cf6a, 0xb16efb48, 0x4e3ce39b, 0xce3b06eb, 0xa427bf3, 0xb9d659f4, 0xfbfe5bf5, 0x9a1a525b, 0xc62065f8, 0xdb12dbfb, 0xbdb98c51, 0xa6910e94, 0x4a9d012c, 0x31eff9c1}, {0xefb3af61, 0xab576d1c, 0xab46690a, 0x8052608b, 0x80a2090d, 0xc966c7ef, 0x53fa73fd, 0x2fda1bfd, 0xbad63bf5, 0xa61c9c21, 0xbba2ba94, 0xf67804a4, 0xfbde533a, 0x795edbf7, 0xf4d0afa1, 0xb87f7d28, 0xbfb41be8, 0xbdb44990, 0x36e2fde, 0x62926e9, 0xff5ccf6a, 0xfdf1480a, 0xefb8af44, 0x60980c30, 0x4481262d}, {0xbed38bf4, 0xdae89bf7, 0xf7df9af6, 0x57898676, 0xc703067a, 0x9fd21be0, 0xf4f50aa4, 0xb4bd6448, 0xc499e50b, 0xb419244a, 0xfffd5570, 0x7ff68e9e, 0x1d66ff59, 0x6f6fad1f, 0xf7e51ff7, 0x58602151, 0x995908a9, 0x484a53f7, 0xbbfe1267, 0x3aeadbef, 0xbbcab93c, 0xc0d10188, 0x717e4bdd, 0xd2cecafb, 0xc357baf8}, {0x850e56b7, 0xdbec442d, 0x717dcf0a, 0x5ebbf35d, 0x5883cfad, 0xa986cef0, 0xe973ff13, 0x911902f7, 0xcb099fc0, 0xb4e56d2a, 0x65a48d1b, 0x5e81ea73, 0xb4b1240c, 0xc5250528, 0x50de33b, 0x32c1417, 0x524dc5ff, 0x5a58409, 0xc209650d, 0x5a93525f, 0xa03d0434, 0x20856037, 0x92b9101f, 0xa098066f, 0xf9de189c}, {0x29080014, 0x81190401, 0xc904ec0a, 0x822b33d2, 0xc70b20dc, 0x652bb406, 0x44a8a58f, 0xac6c413, 0xb4d446e4, 0x61e65bf1, 0x3cd138f, 0x4844db61, 0x58e2fd22, 0xac35e460, 0x1320d410, 0x23a14302, 0x6ea8d3, 0x5e0b27f3, 0x9605256b, 0xa4b4510c, 0x888adabc, 0x1bcabaf7, 0xd80626f1, 0x84ec1b98, 0x7b6ed963}, {0x6d4783e5, 0x3a5c33d4, 0x5098d6f7, 0x4b00ae37, 0x4d4736f3, 0x8fbb01f5, 0xeb59908c, 0xfc6861a2, 0x7cebf5b3, 0x5d4b937f, 0xb4b96460, 0xe5e5949c, 0x406afbe2, 0xfed4b9ff, 0xfbc77bfd, 0x45a4ec5b, 0x9869c57, 0x500aa2f3, 0x38e3b9e4, 0x37e62be1, 0x5d868be9, 0x124ef3ff, 0x59e6fbf3, 0x5c46f3f0, 0x5242fb53}, {0x733de042, 0x4b226403, 0x269b7d09, 0xac0a255d, 0xc6926908, 0x5e27ec81, 0x4ae6bddf, 0x5a5e5af7, 0xba7418c4, 0x7be6fbc4, 0x34afb5f, 0x9802f797, 0xf490a6f4, 0x7bf61da4, 0x5b1b9be6, 0x3b9f87e8, 0x40a987f3, 0xb481ec49, 0x43fbfd8d, 0x8ab64ba, 0xe1f35498, 0x120ef7b1, 0x9684ed20, 0xc481272f, 0xe6b1240d}, {0x216c69b0, 0x8123671c, 0x6b7be0ff, 0x5c82b4ff, 0x94908465, 0xfde3fd5b, 0xf6e3b4ee, 0x5b87dff7, 0x78cbe7f2, 0x3ce6f762, 0x41076c97, 0xc6eebb, 0x182af5a9, 0xca7bbd04, 0x4b0beaff, 0x88c6c83, 0xa4fd3d3, 0x984b44ff, 0xcdc35e4b, 0xede8253d, 0xa0171c14, 0x1b5e73ff, 0xcecfd7e3, 0x9a4b6ab7, 0xdab9cbff}, {0x69e53416, 0xd8010655, 0x50284a35, 0x5f1ab0b8, 0xca194018, 0x391d5185, 0x1886007, 0x81f00411, 0xa3f00824, 0xe9d61a04, 0xbdbf38a0, 0xb4d5a061, 0xe5efac01, 0xa4b5f900, 0x31f50d24, 0x14b1e50f, 0xd94b401, 0x28209f51, 0x7ca1e121, 0xa06f3508, 0xe613fcb1, 0xe8d28bff, 0xb100ae5, 0xc3ce9a24, 0x7bc6daf7}, {0xfffafd9a, 0xfeeda361, 0x96b93637, 0x7f696634, 0x5f6bcaeb, 0x534601d5, 0x9462f212, 0xa427dc4a, 0xc63b6712, 0x9b2fef7e, 0xc686745, 0x232e001, 0xc549ac28, 0xa1bb56fb, 0x184edbe3, 0xeb918051, 0x4308a643, 0xc34df403, 0x61627ef5, 0x73945874, 0xa4111d00, 0x2381063d, 0x508f71e2, 0x82a9f4f7, 0xa5356410}, {0x396ca00a, 0x69fae91d, 0xbb6efbb4, 0xddf6fffa, 0x2de45bdb, 0x7453f34c, 0x4a1f3f81, 0xc04eecf3, 0x9185f7ca, 0x29e77b, 0xa8381bf2, 0xb9585960, 0x11e5aca8, 0x462b761b, 0xc219647b, 0x4dfc083b, 0x4f6ac4db, 0x4b03b05f, 0x565822f7, 0xf9d61805, 0x2013603, 0x12a92415, 0x508b24b7, 0x30451d20, 0xa9ee7990}, {0x63d9d818, 0xd6e4ddc3, 0x84917665, 0xfb59073c, 0x5fdffaba, 0xaa50a09c, 0x4bc69fd3, 0xb005a4e1, 0xebfc2d04, 0xfbdadbdf, 0xa89d612c, 0x93127314, 0xe4f7efa0, 0xbbf61c4f, 0x78e6dbf8, 0xd7d9fcf6, 0x4f298e9f, 0x4648a6db, 0x2bc04aa7, 0x7bcedbf6, 0xa4513c38, 0x529303fd, 0x124ac5ef, 0x35bcb543, 0x73129005}};
static constexpr signed char layer_9_bias[32] = {1, -1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, 1, 1, 1};
static constexpr signed char layer_10_threshold[32] = {-74, 18, -4, 20, -82, -20, 54, -68, -4, 36, 6, -8, -25, -53, -7, -3, -124, -11, -3, 75, 42, 55, 15, -8, -7, 22, 11, 70, -85, -17, 29, 23};
static constexpr unsigned int layer_11_weight[10][1] = {{0x69b2a1f1}, {0x8ccbe08e}, {0xc3fe4bd3}, {0xb4f31e40}, {0xc4500b97}, {0xc8bb34cd}, {0x8e59637d}, {0x959a1527}, {0x46eb30f3}, {0xc6533d93}};
static constexpr signed char layer_11_bias[10] = {-1, -1, 1, 1, 1, 1, -1, -1, 1, 1};

static int layer_2_output[26][26][32];
static unsigned int layer_3_output[26][26][1];
static unsigned int layer_4_output[13][13][1];
static signed int layer_5_output[11][11][32];
static unsigned int layer_6_output[11][11][1];
static unsigned int layer_7_output[5][5][1];
static signed int layer_9_output[32];
static unsigned int layer_10_output[1];
static signed int layer_11_output[10];


void predict_bnntest(int const * const x, int * pred) {
    auto layer_0_output = x;
	
    // Layer 1: Reshape
    auto layer_1_output = (int (*)[28][1]) layer_0_output;

    // Layer 2: Conv
    for (int h = 0; h < 26; h++) {
      for (int w = 0; w < 26; w++) {
        for (int m = 0; m < 32; m++) {
          layer_2_output[h][w][m] = layer_2_bias[m];
        }
        for (int kH = 0; kH < 3; kH++) {
          for (int kW = 0; kW < 3; kW++) {
            for (int c = 0; c < 1; c++) {
              for (int m = 0; m < 32; m++) {
                layer_2_output[h][w][m] += layer_2_weight[kH][kW][c][m] * layer_1_output[h * 1 + kH - 0][w * 1 + kW - 0][c];
              }
            }
          }
        }
      }
    }

    // Layer 3: Step
    for (int h = 0; h < 26; h++) {
      for (int w = 0; w < 26; w++) {
        for (int c = 0; c < 32; c++) {
          if (layer_2_output[h][w][c] >= layer_3_threshold[c]) {
            layer_3_output[h][w][c / 32] |= (1U << (31 - c % 32));
          } else {
            layer_3_output[h][w][c / 32] &= ~(1U << (31 - c % 32));
          }
        }
      }
    }

    // Layer 4: MaxPool
    for (int h = 0; h < 13; h++) {
      for (int w = 0; w < 13; w++) {
        for (int c = 0; c < 1; c++) {
          layer_4_output[h][w][c] = 0;
        }
        for (int kH = 0; kH < 2; kH++) {
          for (int kW = 0; kW < 2; kW++) {
            for (int c = 0; c < 1; c++) {
              layer_4_output[h][w][c] |= layer_3_output[h * 2 + kH][w * 2 + kW][c];
            }
          }
        }
      }
    }

    // Layer 5: Conv
    for (int h = 0; h < 11; h++) {
      for (int w = 0; w < 11; w++) {
        for (int m = 0; m < 32; m++) {
          layer_5_output[h][w][m] = layer_5_bias[m];
        }
        for (int kH = 0; kH < 3; kH++) {
          for (int kW = 0; kW < 3; kW++) {
            for (int m = 0; m < 32; m++) {
              for (int c = 0; c < 1; c++) {
                layer_5_output[h][w][m] += 2 * __builtin_popcount((unsigned int)~(unsigned int)(layer_5_weight[kH][kW][m][c] ^ layer_4_output[h * 1 + kH - 0][w * 1 + kW - 0][c])) - 32;
              }
            }
          }
        }
      }
    }

    // Layer 6: Step
    for (int h = 0; h < 11; h++) {
      for (int w = 0; w < 11; w++) {
        for (int c = 0; c < 32; c++) {
          if (layer_5_output[h][w][c] >= layer_6_threshold[c]) {
            layer_6_output[h][w][c / 32] |= (1U << (31 - c % 32));
          } else {
            layer_6_output[h][w][c / 32] &= ~(1U << (31 - c % 32));
          }
        }
      }
    }

    // Layer 7: MaxPool
    for (int h = 0; h < 5; h++) {
      for (int w = 0; w < 5; w++) {
        for (int c = 0; c < 1; c++) {
          layer_7_output[h][w][c] = 0;
        }
        for (int kH = 0; kH < 2; kH++) {
          for (int kW = 0; kW < 2; kW++) {
            for (int c = 0; c < 1; c++) {
              layer_7_output[h][w][c] |= layer_6_output[h * 2 + kH][w * 2 + kW][c];
            }
          }
        }
      }
    }

    // Layer 8: Reshape
    auto layer_8_output = (unsigned int (*)) layer_7_output;

    // Layer 9: Gemm
    for (int d = 0; d < 32; d++) {
      layer_9_output[d] = layer_9_bias[d];
    }
    for (int d = 0; d < 32; d++) {
      for (int i = 0; i < 25; i++) {
        layer_9_output[d] += 2 * __builtin_popcount((unsigned int)~(unsigned int)(layer_9_weight[d][i] ^ layer_8_output[i])) - 32;
      }
    }

    // Layer 10: Step
    for (int d = 0; d < 32; d++) {
      if (layer_9_output[d] >= layer_10_threshold[d]) {
        layer_10_output[d / 32] |= (1U << (31 - d % 32));
      } else {
        layer_10_output[d / 32] &= ~(1U << (31 - d % 32));
      }
    }

    // Layer 11: Gemm
    for (int d = 0; d < 10; d++) {
      layer_11_output[d] = layer_11_bias[d];
    }
    for (int d = 0; d < 10; d++) {
      for (int i = 0; i < 1; i++) {
        layer_11_output[d] += 2 * __builtin_popcount((unsigned int)~(unsigned int)(layer_11_weight[d][i] ^ layer_10_output[i])) - 32;
      }
    }


    for (int i = 0; i < 10; i++) {
        pred[i] += layer_11_output[i];
    }
}

}